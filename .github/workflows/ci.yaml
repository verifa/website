name: build-test

on:
  push:
    branches:
      - "main"
      #TODO REMOVE THIS
      - "go-migration"
  release:
    types: [published]
  pull_request:
    types: [opened, reopened, synchronize, labeled]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ">=1.21.4"
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install TailwindCSS
        run: npm install -D tailwindcss
      - name: Run tests and lint
        run: make ci

  deploy:
    runs-on: ubuntu-latest
    # Run on main branch, release or if PR contains the 'preview' label
    if: github.ref == 'refs/heads/main' || github.event_name == 'release' || contains( github.event.pull_request.labels.*.name, 'preview')

    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: ">=1.21.4"
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install TailwindCSS
        run: npm ci
      - name: Run tests and lint
        run: make ci
      - name: Write deploy variables
        id: vars
        run: |
          if [ "${{ github.event_name }}" == "release" ]
          then
            echo "deploy_env=prod" >> $GITHUB_OUTPUT
          elif [ "${GITHUB_REF#refs/heads/}" == "main" ]
          then
            echo "deploy_env=staging" >> $GITHUB_OUTPUT
          elif [ "${{ contains( github.event.pull_request.labels.*.name, 'preview') }}" == "true" ]
          then
            echo "deploy_env=preview" >> $GITHUB_OUTPUT
          else
            echo "deploy_env=unknown" >> $GITHUB_OUTPUT
          fi
      - name: Dump deployment variables
        run: echo "${{ steps.vars.outputs.deploy_env }}"
      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v2"
        with:
          version: ">= 363.0.0"
      - name: Login to GCP Artifact Registry
        env:
          PROJECT_ID: verifa-website
          REGION: europe-north1
          APPLICATION_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        run: |
          gcloud auth configure-docker ${REGION}-docker.pkg.dev/verifa-website/website
      - name: Build image and deploy
        run: |
          make deploy-${deploy_env}
