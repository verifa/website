package website

import (
	"fmt"
	"strconv"
	"strings"
)

// What we want:
// - A list of (filtered) blog posts to show
// - A list of tags to filter by.
// - Which tags are still selectable.
templ blogs(posts []*Post, tags map[string]TagStatus) {
	<div id="blog-posts-grid">
		<section class="container mx-auto">
			<div class="flex space-x-4">
				<div>
					<img class="h-16 w-16 object-contain" src="/static/logo-element.png" alt="logo-ement"/>
				</div>
				<div>
					<p class="v-h3">Our blog and news.</p>
					<p class="v-h1">Out and about.</p>
				</div>
			</div>
			<div class="mt-12">
				<p class="v-h3">Filter by tag</p>
				<form
					hx-get="/blog/"
					hx-trigger="change"
					hx-target="#blog-posts-grid"
					hx-swap="outerHTML"
				>
					<div
						class="flex flex-wrap gap-x-4"
					>
						for _, tag := range sortTags(tags) {
							<div class="">
								<input
									type="checkbox"
									id={ tag }
									name={ tag }
									class="peer hidden"
									if tags[tag] == TagStatusChecked {
										checked
									}
									if tags[tag] == TagStatusNone {
										disabled
									}
								/>
								<label
									for={ tag }
									value={ tag }
									class="
                                my-2 border-0 px-3 py-0.5 bg-v-gray  focus:bg-v-gray
                                flex items-center gap-x-1 text-v-white
                                cursor-pointer
                                hover:peer-enabled:bg-v-pink
                                peer-checked:bg-v-pink
                                peer-disabled:bg-opacity-40
                                peer-disabled:cursor-not-allowed
                                "
								>
									<p>#{ tag }</p>
								</label>
							</div>
						}
					</div>
				</form>
			</div>
		</section>
		<section class="container mx-auto">
			@PostsGrid(posts, PostsGridOptions{})
		</section>
	</div>
}

templ blog(post *Post) {
	<div class="container mx-auto">
		<section class="">
			<h1 class="v-h1 text-center">{ post.Title }</h1>
			<div class="mt-2 flex flex-wrap gap-x-2 justify-center">
				for tag := range post.Tags {
					<a href={ templ.URL("/blog/?tags=" + tag) } class="px-2 v-p group/tag hover:bg-v-pink">
						<span class="text-v-gray group-hover/tag:text-v-white">#</span><span class="text-v-black/70 group-hover/tag:text-v-white">{ tag }</span>
					</a>
				}
			</div>
			<p class="mt-8 text-center text-v-black/70">
				@authorLinks(post.Authors)
				&nbsp;•&nbsp;{ fmt.Sprintf("%d minutes", int(post.ReadingTime.Minutes())) }&nbsp;•&nbsp;{ post.Date.Format("2006-01-02") }
			</p>
		</section>
		<div class="max-w-3xl mx-auto">
			<article class="prose md:prose-lg lg:prose-xl xl:prose-2xl">
				<img class="w-full h-full" src={ post.Image } alt={ post.Title }/>
				<div id="blog-container">
					if post.ShowTableOfContents {
						@templTableOfContents(post.TableOfContents)
					}
					@templ.Raw(string(post.Body))
					@templReferences(post.References)
				</div>
				<hr class="border-1 border-v-gray"/>
				<div class="not-prose flex flex-wrap justify-center gap-8">
					for _, author := range post.Authors {
						<a href={ templ.URL("/crew/" + author.ID + "/") }>
							<img class="w-40 lg:w-52 flex-none rounded-sm object-cover" src={ author.Profile } alt={ author.Name }/>
							<p>{ author.Name }</p>
							<p>{ author.Position }</p>
						</a>
					}
				</div>
				<hr class="border-1 border-v-gray"/>
				<h2>Comments</h2>
				<script src="https://giscus.app/client.js" data-repo="verifa/website" data-repo-id="R_kgDOGo3alQ" data-category="Blog" data-category-id="DIC_kwDOGo3alc4CcKOD" data-mapping="pathname" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="bottom" data-theme="preferred_color_scheme" data-lang="en" crossorigin="anonymous" async></script>
				<hr class="border-1 border-v-gray"/>
			</article>
		</div>
		<section>
			<div class="v-h2">
				<h2 class="">Read similar posts</h2>
			</div>
			<div class="mt-8">
				@PostsGrid(post.SimilarPosts, PostsGridOptions{})
			</div>
		</section>
	</div>
}

css tableOfContentsClass() {
	margin: 0;
	padding: 0;
	list-style-type: none;
}

templ templTableOfContents(toc tableOfContents) {
	<h2>Table of contents</h2>
	<ol class={ tableOfContentsClass() }>
		for _, section := range toc {
			<li class="">
				<a class="no-underline font-normal hover:text-v-lilac" href={ templ.URL(section.url) }>{ section.text }</a>
				if len(section.children) > 0 {
					<ol class="list-none prose-li:text-base md:prose-li:text-lg xl:prose-li:text-xl">
						for _, sub := range section.children {
							<li class="">
								<a class="no-underline font-normal hover:text-v-lilac" href={ templ.URL(sub.url) }>{ sub.text }</a>
							</li>
						}
					</ol>
				}
			</li>
		}
	</ol>
	<hr/>
}

css referencesClass() {
	margin: 0;
	padding: 0;
	list-style-type: none;
}

templ templReferences(references references) {
	if len(references) > 0 {
		<hr/>
		<h2>References</h2>
		<ol class={ referencesClass(), "prose-li:text-base md:prose-li:text-lg xl:prose-li:text-xl" }>
			for _, reference := range references {
				<li class="prose-li:text-base">
					@templReferenceIEEE(reference)
				</li>
			}
		</ol>
	}
}

templ templReferenceIEEE(ref reference) {
	// Use IEEE style of referencing, but not that strict.
	[{ strconv.Itoa(ref.Index) }] { templReferenceAuthors(ref.Authors) }. <span class="italic">"{ ref.Title }"</span>, ({ ref.Year }) 
	<a class="no-underline font-normal hover:text-v-lilac" href={ templ.URL(ref.URL.String()) }>
		<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="h-4 w-4 inline-block align-baseline">
			<path fill-rule="evenodd" d="M15.75 2.25H21a.75.75 0 0 1 .75.75v5.25a.75.75 0 0 1-1.5 0V4.81L8.03 17.03a.75.75 0 0 1-1.06-1.06L19.19 3.75h-3.44a.75.75 0 0 1 0-1.5Zm-10.5 4.5a1.5 1.5 0 0 0-1.5 1.5v10.5a1.5 1.5 0 0 0 1.5 1.5h10.5a1.5 1.5 0 0 0 1.5-1.5V10.5a.75.75 0 0 1 1.5 0v8.25a3 3 0 0 1-3 3H5.25a3 3 0 0 1-3-3V8.25a3 3 0 0 1 3-3h8.25a.75.75 0 0 1 0 1.5H5.25Z" clip-rule="evenodd"></path>
		</svg>
	</a>
}

func templReferenceAuthors(authors []author) string {
	authInitials := func(first string) string {
		names := strings.Split(first, " ")
		inits := strings.Builder{}
		for _, name := range names {
			inits.WriteByte(name[0])
			inits.WriteString(". ")
		}
		return inits.String()
	}
	authToStr := func(author author) string {
		return authInitials(author.First) + author.Last
	}
	if len(authors) > 3 {
		return fmt.Sprintf("%s et al", authToStr(authors[0]))
	}

	authorStrs := make([]string, len(authors))
	for i, author := range authors {
		authorStrs[i] = authToStr(author)
	}
	return strings.Join(authorStrs, ", ")
}

templ authorLinks(authors []Member) {
	for i, author := range authors {
		<a href={ templ.URL("/crew/" + author.ID + "/") } class="">
			if i == 0 {
				{ author.Name }
			} else {
				, { author.Name }
			}
		</a>
	}
}

templ iconTagChecked() {
	<svg
		xmlns="http://www.w3.org/2000/svg"
		class="h-6 w-6"
		fill="none"
		viewBox="0 0 24 24"
		stroke="currentColor"
	>
		<path
			stroke-linecap="round"
			stroke-linejoin="round"
			stroke-width="3"
			d="M5 13l4 4L19 7"
		></path>
	</svg>
}
